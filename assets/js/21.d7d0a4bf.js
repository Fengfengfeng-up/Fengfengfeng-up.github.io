(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{411:function(t,r,e){"use strict";e.r(r);var a=e(11),n=Object(a.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"写在前面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[t._v("#")]),t._v(" 写在前面")]),t._v(" "),e("p",[e("strong",[t._v("设计模式")]),t._v("（Design Pattern）指的是在面向对象软件设计过程中对特定问题的简洁优雅的解决方案。")]),t._v(" "),e("p",[t._v("设计模式是一种解决问题的思想，与语言无关，但是在不同的语言中一些设计模式的具体实现会截然不同。例如许多设计模式在 JavaScript 中的实现与在像 Java 这样的静态类型，以类为中心的传统面向对象语言中的实现相差会很多。这是因为 JavaScript 是弱类型的，动态的，且没有真正意义上的类，对象之间的继承依赖的是原型委托而非类式继承，其中函数是一等公民，所以很多设计模式都是通过高阶函数和闭包来实现的。")]),t._v(" "),e("p",[t._v("因此这部分包含了对 JavaScript 开发中常见的 14 种设计模式的总结以及个人的一些心得体会，主要参考了 "),e("a",{attrs:{href:"https://www.ituring.com.cn/book/1632",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 设计模式和开发实践"),e("OutboundLink")],1),t._v("（强烈推荐）一书。")]),t._v(" "),e("blockquote",[e("p",[t._v("感谢前辈们的辛勤付出，帮助我感受到 coding 带来的快感。")])]),t._v(" "),e("h2",{attrs:{id:"目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),e("ol",[e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/singleton.html"}},[t._v("单例模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/strategy.html"}},[t._v("策略模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/proxy.html"}},[t._v("代理模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/iterator.html"}},[t._v("迭代器模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/pub-sub.html"}},[t._v("发布—订阅模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/command.html"}},[t._v("命令模式")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/my-docs/design-pattern/template-method.html"}},[t._v("模板方法模式")])],1)])])}),[],!1,null,null,null);r.default=n.exports}}]);