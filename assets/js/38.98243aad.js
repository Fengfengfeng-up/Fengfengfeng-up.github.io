(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{429:function(t,s,a){"use strict";a.r(s);var r=a(11),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"两数相除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两数相除"}},[t._v("#")]),t._v(" 两数相除")]),t._v(" "),a("p",[t._v("力扣🔗："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/divide-two-integers",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/divide-two-integers"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("p",[t._v("给定两个整数，被除数 "),a("code",[t._v("dividend")]),t._v(" 和除数 "),a("code",[t._v("divisor")]),t._v("。将两数相除，要求不使用乘法、除法和 mod 运算符。")]),t._v(" "),a("p",[t._v("返回被除数 "),a("code",[t._v("dividend")]),t._v(" 除以除数 "),a("code",[t._v("divisor")]),t._v(" 得到的商。")]),t._v(" "),a("p",[t._v("整数除法的结果应当截去（"),a("code",[t._v("truncate")]),t._v("）其小数部分，例如："),a("code",[t._v("truncate(8.345) = 8")]),t._v(" 以及 "),a("code",[t._v("truncate(-2.7335) = -2")])]),t._v(" "),a("p",[a("strong",[t._v("示例 1：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("输入: dividend = 10, divisor = 3\n输出: 3\n解释: 10/3 = truncate(3.33333..) = truncate(3) = 3\n")])])]),a("p",[t._v("示例 2:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("输入: dividend = 7, divisor = -3\n输出: -2\n解释: 7/-3 = truncate(-2.33333..) = -2\n")])])]),a("p",[a("strong",[t._v("提示：")])]),t._v(" "),a("ul",[a("li",[t._v("被除数和除数均为 32 位有符号整数。")]),t._v(" "),a("li",[t._v("除数不为 0。")]),t._v(" "),a("li",[t._v("假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1。")])]),t._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),a("ul",[a("li",[t._v("首先处理特殊情况，当 "),a("code",[t._v("divisor === -1")]),t._v(" 时，如果 "),a("code",[t._v("dividend === -2^31")]),t._v(" 就返回结果 "),a("code",[t._v("-2^31 - 1")]),t._v("，否则返回 "),a("code",[t._v("-divisor")]),t._v("。当除数 "),a("code",[t._v("divisor === 1")]),t._v(" 时，返回结果 "),a("code",[t._v("dividend")]),t._v("。")]),t._v(" "),a("li",[t._v("然后通过式子 "),a("code",[t._v("(dividend ^ divisor) < 0")]),t._v(" 得出最终结果的正负性，保存在变量 "),a("code",[t._v("isNegative")]),t._v(" 当中，"),a("code",[t._v("true")]),t._v(" 表示为负值，"),a("code",[t._v("false")]),t._v(" 表示为正值。随后将 "),a("code",[t._v("divisor")]),t._v(" 和 "),a("code",[t._v("dividend")]),t._v(" 转为各自的负数形式。")]),t._v(" "),a("li",[t._v("通过递归函数 "),a("code",[t._v("resolve(dividend, divisor)")]),t._v(" 得出结果，根据变量 "),a("code",[t._v("isNegative")]),t._v(" 转换并得出最终结果。")]),t._v(" "),a("li",[a("code",[t._v("resolve()")]),t._v(" 函数的作用是通过递归更新除数和被除数，每次利用循环对它们进行自加操作，当被除数大于除数时退出函数，这样快速找出它们的商。")])]),t._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @param {number} dividend\r\n * @param {number} divisor\r\n * @return {number}\r\n */")]),t._v("\r\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("divide")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dividend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" divisor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("divisor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dividend\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("divisor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果是最小整数，返回最大整数，否则返回其负值")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dividend\r\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isNegative "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果是否是负值")]),t._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将被除数和除数都转为负值，防止溢出")]),t._v("\r\n  dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dividend\r\n  divisor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" divisor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" divisor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("divisor\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" isNegative "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" result\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dividend"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" divisor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 结果小于 1 时，退出函数，返回 0 ")]),t._v("\r\n\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" divisor\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\r\n\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n      count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" count\r\n      temp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" temp\r\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dividend "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" divisor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);