(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{431:function(t,s,a){"use strict";a.r(s);var e=a(11),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"实现-strstr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-strstr"}},[t._v("#")]),t._v(" 实现 strStr()")]),t._v(" "),a("p",[t._v("力扣🔗："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-strstr",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/implement-strstr"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("p",[t._v("实现 "),a("code",[t._v("strStr()")]),t._v(" 函数。")]),t._v(" "),a("p",[t._v("给定一个 "),a("code",[t._v("haystack")]),t._v(" 字符串和一个 "),a("code",[t._v("needle")]),t._v(" 字符串，在 "),a("code",[t._v("haystack")]),t._v(" 字符串中找出 "),a("code",[t._v("needle")]),t._v(" 字符串出现的第一个位置 (从 0 开始)。如果不存在，则返回  "),a("strong",[t._v("-1")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('输入: haystack = "hello", needle = "ll"\n输出: 2\n')])])]),a("p",[a("strong",[t._v("示例 2：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('输入: haystack = "aaaaa", needle = "bba"\n输出: -1\n')])])]),a("p",[a("strong",[t._v("说明：")])]),t._v(" "),a("p",[t._v("当 "),a("code",[t._v("needle")]),t._v(" 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。")]),t._v(" "),a("p",[t._v("对于本题而言，当 "),a("code",[t._v("needle")]),t._v(" 是空字符串时我们应当返回 0。这与 C 语言的 "),a("code",[t._v("strstr()")]),t._v(" 以及 Java 的 "),a("code",[t._v("indexOf()")]),t._v(" 定义相符。")]),t._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),a("ul",[a("li",[t._v("设置 "),a("code",[t._v("index1")]),t._v(" 和 "),a("code",[t._v("index2")]),t._v(" 双指针分别用于指向 "),a("code",[t._v("haystack")]),t._v(" 和 "),a("code",[t._v("needle")]),t._v(" 字符串中的字符索引，初始值都为 "),a("code",[t._v("0")]),t._v("。")]),t._v(" "),a("li",[t._v("向右移动指针 "),a("code",[t._v("index1")]),t._v("，对比两指针指向的字符是否相同。字符相同时，进入匹配状态，继续往后移动两指针进行比较，如果不相同匹配停止，将指针 "),a("code",[t._v("index1")]),t._v(" 回溯到 "),a("code",[t._v("index1 - index2 + 1")]),t._v(" 的位置（匹配起始位置的下一个），重置指针 "),a("code",[t._v("index2")]),t._v(" 到初始状态，重复这一步骤；如果指针 "),a("code",[t._v("index2")]),t._v(" 到达 "),a("code",[t._v("needle")]),t._v(" 末位，表示匹配完成，返回结果 "),a("code",[t._v("index1 - index2 + 1")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @param {string} haystack\r\n * @param {string} needle\r\n * @return {number}\r\n */")]),t._v("\r\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strStr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" needle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("needle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("haystack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个字符匹配时")]),t._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("index2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" needle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" index1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" index2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果全部匹配完成")]),t._v("\r\n      index1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继续往后匹配")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 还没有进入匹配，继续往后移动指针 index1")]),t._v("\r\n        index1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已经进入匹配")]),t._v("\r\n        index1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" index1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" index2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回溯到匹配起始位置的下一个位置")]),t._v("\r\n        index2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重置指针 index2")]),t._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\r\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);