(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{445:function(s,t,a){"use strict";a.r(t);var n=a(11),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"移除元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除元素"}},[s._v("#")]),s._v(" 移除元素")]),s._v(" "),a("p",[s._v("力扣🔗："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-element",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://leetcode-cn.com/problems/remove-element"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[s._v("#")]),s._v(" 题目")]),s._v(" "),a("p",[s._v("给你一个数组 "),a("code",[s._v("nums")]),s._v(" 和一个值 "),a("code",[s._v("val")]),s._v("，你需要 "),a("strong",[s._v("原地")]),s._v(" 移除所有数值等于 "),a("code",[s._v("val")]),s._v(" 的元素，并返回移除后数组的新长度。")]),s._v(" "),a("p",[s._v("不要使用额外的数组空间，你必须仅使用 "),a("code",[s._v("O(1)")]),s._v(" 额外空间并 "),a("strong",[s._v("原地")]),s._v(" "),a("strong",[s._v("修改输入数组")]),s._v("。")]),s._v(" "),a("p",[s._v("元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。")]),s._v(" "),a("p",[a("strong",[s._v("说明：")])]),s._v(" "),a("p",[s._v("为什么返回数值是整数，但输出的答案是数组呢?")]),s._v(" "),a("p",[s._v("请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。")]),s._v(" "),a("p",[s._v("你可以想象内部操作如下:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("  // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝\nint len = removeDuplicates(nums);\n\n// 在函数里修改输入数组对于调用者是可见的。\n// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。\nfor (int i = 0; i < len; i++) {\n    print(nums[i]);\n}\n")])])]),a("p",[a("strong",[s._v("示例 1：")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("输入：nums = [3,2,2,3], val = 3\n输出：2, nums = [2,2]\n解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n")])])]),a("p",[a("strong",[s._v("示例 2：")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("输入：nums = [0,1,2,2,3,0,4,2], val = 2\n输出：5, nums = [0,1,4,0,3]\n解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n")])])]),a("p",[a("strong",[s._v("提示：")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("0 <= nums.length <= 100")])]),s._v(" "),a("li",[a("code",[s._v("0 <= nums[i] <= 50")])]),s._v(" "),a("li",[a("code",[s._v("0 <= val <= 100")])])]),s._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[s._v("#")]),s._v(" 解题思路")]),s._v(" "),a("ul",[a("li",[s._v("设置快慢双指针 "),a("code",[s._v("fast")]),s._v(" 和 "),a("code",[s._v("slow")]),s._v("，指向 "),a("code",[s._v("nums")]),s._v(" 的第一位。")]),s._v(" "),a("li",[s._v("比较快指针指向的元素值与 "),a("code",[s._v("val")]),s._v("。如果 "),a("code",[s._v("nums[fast] === val")]),s._v("，忽略该元素，往后移动快指针；如果 "),a("code",[s._v("nums[fast] !== val")]),s._v("，表示是需要保留的元素，修改 "),a("code",[s._v("nums[slow] = nums[fast]")]),s._v("，随后向后移动两指针。")]),s._v(" "),a("li",[s._v("重复上一步操作直到快指针到达 "),a("code",[s._v("nums")]),s._v(" 末尾，此时已将所有需要保留的元素排列在数组左端，返回 "),a("code",[s._v("slow")]),s._v("，也就是删除指定值元素后的数组长度即可。")])]),s._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\r\n * @param {number[]} nums\r\n * @param {number} val\r\n * @return {number}\r\n */")]),s._v("\r\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("removeElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" slow "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("fast "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("fast"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!==")]),s._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果快指针指向的元素值不等于 val")]),s._v("\r\n      nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("slow"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("fast"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\r\n      fast"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" slow\r\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\r\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);