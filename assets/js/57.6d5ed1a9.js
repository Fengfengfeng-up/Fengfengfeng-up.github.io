(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{452:function(t,s,a){"use strict";a.r(s);var n=a(11),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"两数之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两数之和"}},[t._v("#")]),t._v(" 两数之和")]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("p",[t._v("给定一个整数数组 "),a("code",[t._v("nums")]),t._v(" 和一个整数目标值 "),a("code",[t._v("target")]),t._v("，请你在该数组中找出 "),a("strong",[t._v("和为目标值")]),t._v(" 的那 "),a("strong",[t._v("两个")]),t._v(" 整数，并返回它们的数组下标。")]),t._v(" "),a("p",[t._v("你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。")]),t._v(" "),a("p",[t._v("你可以按任意顺序返回答案。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n")])])]),a("p",[a("strong",[t._v("示例 2：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("输入：nums = [3,2,4], target = 6\n输出：[1,2]\n")])])]),a("p",[a("strong",[t._v("示例 3：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("输入：nums = [3,3], target = 6\n输出：[0,1]\n")])])]),a("p",[a("strong",[t._v("提示：")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("2 <= nums.length <= 10^3")])]),t._v(" "),a("li",[a("code",[t._v("-10^9 <= nums[i] <= 10^9")])]),t._v(" "),a("li",[a("code",[t._v("-10^9 <= target <= 10^9")])]),t._v(" "),a("li",[t._v("只会存在一个有效答案")])]),t._v(" "),a("p",[t._v("力扣🔗："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/two-sum"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[t._v("#")]),t._v(" 解题思路")]),t._v(" "),a("ul",[a("li",[t._v("依次循环遍历 "),a("code",[t._v("nums")]),t._v(" 数组中的每一个元素。")]),t._v(" "),a("li",[t._v("记录当前迭代次数为 "),a("code",[t._v("loop")]),t._v("，记录当前遍历到的元素与 "),a("code",[t._v("target")]),t._v(" 的差值为 "),a("code",[t._v("diff")]),t._v("，并记录当前遍历到的元素和迭代次数 "),a("code",[t._v("loop")]),t._v("分别作为键和值存入对象 "),a("code",[t._v("map")]),t._v(" 当中。")]),t._v(" "),a("li",[t._v("在循环体中，判断 "),a("code",[t._v("map")]),t._v(" 对象中是否已存入键为 "),a("code",[t._v("diff")]),t._v(" 的元素，如有则找出该元素的值（之前已记录的迭代次数，也就是在 "),a("code",[t._v("nums")]),t._v(" 数组中的序号），并将它和当前的迭代次数作为依次新数组的元素返回；如没有则继续遍历，直到 "),a("code",[t._v("nums")]),t._v(" 数组中的最后一个元素结束。")])]),t._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number[]}\r\n */")]),t._v("\r\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("twoSum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录每次迭代，每个键值对的键为每次迭代的值，值为当前迭代的次数（键在 nums 数组中的序号）")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" loop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录迭代次数")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" diff "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存当前迭代值与 target 的差值")]),t._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("loop "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次遍历 nums 数组的每一个元素")]),t._v("\r\n    diff "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算差值")]),t._v("\r\n\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("diff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \r\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 map 对象中存在与 diff（计算的差值）相同的键，则证明已找到")]),t._v("\r\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("diff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n\r\n    map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("loop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" loop "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录当前迭代的值以及迭代次数")]),t._v("\r\n    loop"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新迭代次数")]),t._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\r\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);