(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{454:function(s,t,a){"use strict";a.r(t);var n=a(11),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"z-字形变换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#z-字形变换"}},[s._v("#")]),s._v(" Z 字形变换")]),s._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[s._v("#")]),s._v(" 题目")]),s._v(" "),a("p",[s._v("将一个给定字符串 "),a("code",[s._v("s")]),s._v(" 根据给定的行数 "),a("code",[s._v("numRows")]),s._v(" ，以从上往下、从左到右进行 Z 字形排列。")]),s._v(" "),a("p",[s._v("比如输入字符串为 "),a("code",[s._v('"PAYPALISHIRING"')]),s._v(" 行数为 3 时，排列如下：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("P   A   H   N\nA P L S I I G\nY   I   R\n")])])]),a("p",[s._v("之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："),a("code",[s._v('"PAHNAPLSIIGYIR"')]),s._v("。")]),s._v(" "),a("p",[s._v("请你实现这个将字符串进行指定行数变换的函数：")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("string convert(string s, int numRows);\n")])])]),a("p",[a("strong",[s._v("示例 1：")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('输入：s = "PAYPALISHIRING", numRows = 3\n输出："PAHNAPLSIIGYIR"\n')])])]),a("p",[a("strong",[s._v("示例 2：")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('输入：s = "PAYPALISHIRING", numRows = 4\n输出："PINALSIGYAHRPI"\n解释：\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n')])])]),a("p",[a("strong",[s._v("示例 3：")])]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v('输入：s = "A", numRows = 1\n输出："A"1\n')])])]),a("p",[a("strong",[s._v("提示：")])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("1 <= s.length <= 1000")])]),s._v(" "),a("li",[a("code",[s._v("s")]),s._v(" 由英文字母（小写和大写）、"),a("code",[s._v("','")]),s._v(" 和 "),a("code",[s._v("'.'")]),s._v(" 组成")]),s._v(" "),a("li",[a("code",[s._v("1 <= numRows <= 1000")])])]),s._v(" "),a("p",[s._v("力扣🔗："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/zigzag-conversion",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://leetcode-cn.com/problems/zigzag-conversion"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[s._v("#")]),s._v(" 解题思路")]),s._v(" "),a("ul",[a("li",[s._v("首先定义 "),a("code",[s._v("T = numRows * 2 - 2")]),s._v(" 为 Z 字符变换后的一个周期，类似一个 V 字形。")]),s._v(" "),a("li",[s._v("然后创建一个长度为 "),a("code",[s._v("numRows")]),s._v(" 的数组，其中每个元素值（默认为空字符串）代表 Z 字符变换后的每一行字符组成的字符串，索引作为行数。")]),s._v(" "),a("li",[s._v("依次遍历字符串的每一个字符，通过 "),a("code",[s._v("T")]),s._v(" 和索引 "),a("code",[s._v("i")]),s._v(" 计算出当前字符应该保存在哪一行，然后存入上述数组当中。")]),s._v(" "),a("li",[s._v("最后依次组合上述数组中的每个元素值，即 Z 字符变换后的结果组成的字符串。")])]),s._v(" "),a("h2",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\r\n * @param {string} s\r\n * @param {number} numRows\r\n * @return {string}\r\n */")]),s._v("\r\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("convert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" numRows")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" numRows "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" numRows "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" tempArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("numRows"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每个元素代表 Z 字变换后的每一行，保存的是每行字符组成的字符串")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" numRows "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个 V 字形周期")]),s._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v("\r\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" row "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算出要保存到哪一行")]),s._v("\r\n\r\n    tempArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("row"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 添加该字符到对应索引（行）")]),s._v("\r\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\r\n\r\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" tempArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\r\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\r\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);